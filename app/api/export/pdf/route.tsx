import { type NextRequest, NextResponse } from "next/server"
import puppeteer from "puppeteer"

export async function POST(request: NextRequest) {
  try {
    const { title, content, type, generatedAt, jsonData } = await request.json()

    if (!title || !content) {
      return NextResponse.json({ error: "Missing required fields" }, { status: 400 })
    }

    const footnotes: string[] = []

    const processCitations = (text: string, citations: any[] = []) => {
      if (!citations || citations.length === 0) return text

      let processedText = text
      citations.forEach((citation, index) => {
        const footnoteNumber = footnotes.length + 1
        footnotes.push(`${footnoteNumber}. Source: ${citation.source || "Unknown"}, p.${citation.page || "N/A"}`)
        processedText += ` <sup>[${footnoteNumber}]</sup>`
      })
      return processedText
    }

    // Generate HTML content
    const htmlContent = `
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${title}</title>
        <style>
            @page {
                size: A4;
                margin: 2cm;
                @top-center {
                    content: "${title}";
                    font-size: 12px;
                    color: #6b7280;
                    border-bottom: 1px solid #e5e7eb;
                    padding-bottom: 10px;
                }
                @bottom-center {
                    content: "Page " counter(page) " â€¢ Generated by TsachalGPT on ${new Date().toLocaleDateString()}";
                    font-size: 10px;
                    color: #9ca3af;
                }
            }
            
            body {
                font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
                line-height: 1.6;
                color: #1f2937;
                margin: 0;
                padding: 0;
            }
            
            .cover-page {
                page-break-after: always;
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                height: 100vh;
                text-align: center;
            }
            
            .cover-title {
                font-size: 3rem;
                font-weight: bold;
                color: #1f2937;
                margin-bottom: 2rem;
                line-height: 1.2;
            }
            
            .cover-type {
                font-size: 1.5rem;
                font-weight: bold;
                color: #059669;
                margin-bottom: 1rem;
                text-transform: uppercase;
                letter-spacing: 2px;
            }
            
            .cover-date {
                font-size: 1.1rem;
                color: #6b7280;
                font-style: italic;
                margin-bottom: 3rem;
            }
            
            .cover-footer {
                font-size: 1rem;
                color: #9ca3af;
                position: absolute;
                bottom: 2cm;
            }
            
            .toc-page {
                page-break-after: always;
                page-break-before: always;
            }
            
            .toc-title {
                font-size: 2rem;
                font-weight: bold;
                color: #1f2937;
                margin-bottom: 2rem;
                border-bottom: 2px solid #059669;
                padding-bottom: 0.5rem;
            }
            
            .toc-entry {
                display: flex;
                justify-content: space-between;
                margin-bottom: 0.5rem;
                padding: 0.25rem 0;
            }
            
            .toc-entry.level-1 {
                font-weight: bold;
                font-size: 1.1rem;
                margin-top: 1rem;
            }
            
            .toc-entry.level-2 {
                margin-left: 1rem;
            }
            
            .toc-entry.level-3 {
                margin-left: 2rem;
                font-size: 0.9rem;
            }
            
            .content-page {
                page-break-before: always;
            }
            
            h1 {
                font-size: 2rem;
                font-weight: bold;
                color: #1f2937;
                margin: 2rem 0 1rem 0;
                border-bottom: 2px solid #059669;
                padding-bottom: 0.5rem;
            }
            
            h2 {
                font-size: 1.5rem;
                font-weight: bold;
                color: #1f2937;
                margin: 1.5rem 0 0.75rem 0;
            }
            
            h3 {
                font-size: 1.25rem;
                font-weight: bold;
                color: #374151;
                margin: 1.25rem 0 0.5rem 0;
            }
            
            p {
                margin-bottom: 1rem;
                text-align: justify;
                font-size: 1rem;
                line-height: 1.7;
            }
            
            ul {
                margin: 1rem 0;
                padding-left: 2rem;
            }
            
            li {
                margin-bottom: 0.5rem;
                line-height: 1.6;
            }
            
            table {
                width: 100%;
                border-collapse: collapse;
                margin: 1.5rem 0;
                font-size: 0.9rem;
            }
            
            th, td {
                border: 1px solid #d1d5db;
                padding: 0.75rem;
                text-align: left;
            }
            
            th {
                background-color: #f9fafb;
                font-weight: bold;
                color: #374151;
            }
            
            tr:nth-child(even) {
                background-color: #f9fafb;
            }
            
            .footnotes {
                margin-top: 3rem;
                padding-top: 1rem;
                border-top: 1px solid #e5e7eb;
            }
            
            .footnotes h2 {
                font-size: 1.25rem;
                margin-bottom: 1rem;
            }
            
            .footnote {
                font-size: 0.9rem;
                margin-bottom: 0.5rem;
                color: #4b5563;
            }
            
            sup {
                font-size: 0.75rem;
                color: #059669;
            }
        </style>
    </head>
    <body>
        <!-- Cover Page -->
        <div class="cover-page">
            <h1 class="cover-title">${title}</h1>
            <div class="cover-type">${type}</div>
            <div class="cover-date">Generated on ${new Date(generatedAt).toLocaleDateString("en-US", {
              year: "numeric",
              month: "long",
              day: "numeric",
            })}</div>
            <div class="cover-footer">TsachalGPT Document Generation System</div>
        </div>
        
        <!-- Table of Contents -->
        <div class="toc-page">
            <h1 class="toc-title">Table of Contents</h1>
            ${generateTOC(content)}
        </div>
        
        <!-- Content -->
        <div class="content-page">
            ${processContent(content, jsonData)}
            
            ${
              footnotes.length > 0
                ? `
            <div class="footnotes">
                <h2>References</h2>
                ${footnotes.map((footnote) => `<div class="footnote">${footnote}</div>`).join("")}
            </div>
            `
                : ""
            }
        </div>
    </body>
    </html>
    `

    function generateTOC(content: string) {
      const lines = content.split("\n")
      const tocEntries: string[] = []
      let pageNumber = 1

      lines.forEach((line) => {
        if (line.startsWith("#")) {
          const headerLevel = (line.match(/^#+/) || [""])[0].length
          const headerText = line.replace(/^#+\s*/, "")
          tocEntries.push(`
                    <div class="toc-entry level-${headerLevel}">
                        <span>${headerText}</span>
                        <span>${pageNumber}</span>
                    </div>
                `)
          pageNumber++
        }
      })

      return tocEntries.join("")
    }

    function processContent(content: string, jsonData: any) {
      const lines = content.split("\n")
      let html = ""

      for (const line of lines) {
        if (line.trim() === "") {
          html += "<br>"
          continue
        }

        if (line.startsWith("#")) {
          const headerLevel = (line.match(/^#+/) || [""])[0].length
          const headerText = line.replace(/^#+\s*/, "")
          html += `<h${headerLevel}>${headerText}</h${headerLevel}>`
        } else if (line.startsWith("- ") || line.startsWith("* ")) {
          const bulletText = line.replace(/^[-*]\s*/, "")
          const processedText = processCitations(bulletText, jsonData?.citations)
          html += `<li>${processedText}</li>`
        } else {
          const processedText = processCitations(line, jsonData?.citations)
          html += `<p>${processedText}</p>`
        }
      }

      // Add tables if present in JSON data
      if (jsonData?.tables) {
        jsonData.tables.forEach((tableData: any) => {
          html += `<h3>${tableData.title || "Data Table"}</h3>`
          html += "<table>"
          tableData.rows.forEach((row: any[], rowIndex: number) => {
            html += "<tr>"
            row.forEach((cell) => {
              const tag = rowIndex === 0 ? "th" : "td"
              html += `<${tag}>${cell}</${tag}>`
            })
            html += "</tr>"
          })
          html += "</table>"
        })
      }

      return html
    }

    // Launch Puppeteer and generate PDF
    const browser = await puppeteer.launch({
      headless: true,
      args: ["--no-sandbox", "--disable-setuid-sandbox"],
    })

    const page = await browser.newPage()
    await page.setContent(htmlContent, { waitUntil: "networkidle0" })

    const pdfBuffer = await page.pdf({
      format: "A4",
      printBackground: true,
      margin: {
        top: "2cm",
        right: "2cm",
        bottom: "2cm",
        left: "2cm",
      },
    })

    await browser.close()

    return new NextResponse(pdfBuffer, {
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": `attachment; filename="${title.replace(/[^a-zA-Z0-9]/g, "_")}.pdf"`,
      },
    })
  } catch (error) {
    console.error("PDF export error:", error)
    return NextResponse.json({ error: "Failed to export PDF" }, { status: 500 })
  }
}
